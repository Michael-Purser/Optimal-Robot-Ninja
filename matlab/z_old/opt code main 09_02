% % get problem parameters:
% n       = veh.Optim.n;
% u_min   = veh.Optim.u_min;
% u_max   = veh.Optim.u_max;
% v_min   = veh.Optim.v_min;
% v_max   = veh.Optim.v_max;
% sigma_x = veh.Optim.sigma_x;
% sigma_y = veh.Optim.sigma_y;
% G_hat   = veh.Optim.G_hat;
% 
% % get measurements:
% meas    = sit.meas{end};
% 
% % check vehicle is in admissible position:
% G_initial = checkPosition(meas,[0,0],sigma_x,sigma_y);
% if G_initial>2
%     fprintf(2,'\nInitial G-value is too high: %f \n',G_initial);
%     % error('Vehicle is too close to obstacle!');
%     G_hat = 1.1*G_initial;
%     fprintf(2,'Changing G_hat value to: %f \n',G_hat);
% end
% 
% % define ode:
% ode = @(x,u)[x(3); x(4); u(1); u(2)];
% 
% % states integration:
% h = casadi.SX.sym('h');
% x = casadi.SX.sym('x',4);
% u = casadi.SX.sym('u',2);
% k1 = ode(x,       u); 
% k2 = ode(x+h/2*k1,u);
% k3 = ode(x+h/2*k2,u);
% k4 = ode(x+h*k3,  u);
% 
% xf = x+ h/6 * (k1 + 2*k2 + 2*k3 + k4);
% F = casadi.Function('F',{x,u,h},{xf});
% 
% % initialize opti:
% opti = casadi.Opti();
% T    = opti.variable(1,1);
% x    = opti.variable(4,n+1);
% u    = opti.variable(2,n);
% 
% % initial and final positions + initial guess for time and states:
% x_begin = [0;0;0;0];
% x_final = sit.localGoals{end};
% T_init  = sit.Init.T{end};
% % x_init  = [linspace(0,x_final(1),n+1);linspace(0,x_final(2),n+1); ...
% %     zeros(1,n+1); zeros(1,n+1)];
% x_init     = [sit.Init.path{end}(:,1)';sit.Init.path{end}(:,2)'; ...
%     zeros(1,n+1); zeros(1,n+1)];
% 
% % constraints:
% opti.subject_to(F(x(:,1:end-1),u,T/n)==x(:,2:end));
% opti.subject_to(x(:,1)==x_begin);
% opti.subject_to(x(:,end)==x_final);
% opti.subject_to(v_min <= x(3,:) <= v_max);
% opti.subject_to(v_min <= x(4,:) <= v_max);
% opti.subject_to(u_min <= u(1,:) <= u_max);
% opti.subject_to(u_min <= u(2,:) <= u_max);
% opti.subject_to(T >= 0);
% min_scale = 0.1;
% opti.subject_to(-min_scale<=diff(x(1,:))<=min_scale);
% opti.subject_to(-min_scale<=diff(x(2,:))<=min_scale);
% 
% pos = casadi.SX.sym('pos',2);
% 
% sum = 0;
% for k=1:size(meas,1)
%     th  = meas(k,1);
%     r   = meas(k,2);
%     p   = [-r*sin(th);r*cos(th)];
%     g   = getGaussianValue(pos,p,sigma_x,sigma_y);
%     sum = sum + g;
% end
% 
% costf = casadi.Function('costf',{pos},{sum});
% 
% opti.subject_to(costf(x(1:2,:))<=G_hat);
% 
% % set initial guess:
% opti.set_initial(T, T_init);
% opti.set_initial(x, x_init);
% 
% % objective function: 
% opti.minimize(T);
% 
% % solver:
% options = struct;
% options.expand = true;
% opti.solver('ipopt',options);
% 
% % opts.qpsol = 'qpoases';
% % opts.qpsol_options.sparse = true;
% % opts.qpsol_options.schur = true;
% % opti.solver('sqpmethod',opts);
% 
% % solve problem:
% sol = opti.solve();
% 
% % extract solution:
% T = sol.value(T);
% X = sol.value(x);
% U = sol.value(u);
% 
% % append to struct:
% sit.Sol.X{end+1} = X;
% sit.Sol.U{end+1} = U;
% sit.Sol.T{end+1} = T;
